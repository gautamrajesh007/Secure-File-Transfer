package com.projects.security;

import io.github.cdimascio.dotenv.Dotenv;
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.HttpEntity;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.Files;

public class MalwareScanner {
    private static final Dotenv env = Dotenv.load();
    private static final String API_KEY = env.get("API_KEY");

    public static boolean scanFile(String filePath) throws Exception {
        Path file = Paths.get(filePath);
        try {
            HttpClient client = HttpClient.newHttpClient();
             // Create Multipart Entity
            HttpEntity multipartEntity = MultipartEntityBuilder.create()
                    .addBinaryBody("file", Files.newInputStream(file), ContentType.APPLICATION_OCTET_STREAM, file.getFileName().toString())
                    .build();

            // Convert HttpEntity to ByteArray
            ByteArrayOutputStream baOS = new ByteArrayOutputStream();
            multipartEntity.writeTo(baOS);
            byte[] multipartBody = baOS.toByteArray();

            // Send HTTP Request
            HttpRequest requestPOST = HttpRequest.newBuilder()
                    .uri(URI.create("https://www.virustotal.com/api/v3/files"))
                    .header("x-apikey", API_KEY)
                    .header("accept", "application/json")
                    .header("Content-Type", multipartEntity.getContentType()) // Auto-set boundary
                    .POST(HttpRequest.BodyPublishers.ofByteArray(multipartBody))
                    .build();



            HttpResponse<String> responsePOST = client.send(requestPOST, HttpResponse.BodyHandlers.ofString());

            // Parse JSON Response
            JSONObject jsonResponse = new JSONObject(responsePOST.body());
            System.out.println("VirusTotal Response: " + jsonResponse.toString(4));

            if (!jsonResponse.has("data") || !jsonResponse.getJSONObject("data").has("id")) {
                throw new Exception("Error scanning file: Response does not contain an ID.");
            }

            String analysisId = jsonResponse.getJSONObject("data").getString("id");

            // Send GET Request to retrieve scan results
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://www.virustotal.com/api/v3/analyses/" + analysisId))
                    .header("accept", "application/json")
                    .header("x-apikey", API_KEY)
                    .method("GET", HttpRequest.BodyPublishers.noBody())
                    .build();
            HttpResponse<String> responseGET = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
            System.out.println(responseGET.body());

            JSONObject jsonResponseGET = new JSONObject(responseGET.body());
            System.out.println("VirusTotal Response: " + jsonResponseGET.toString(4));

        } catch (Exception e) {
            throw new Exception("Error scanning file: " + e.getMessage());
        }
        return true;
    }
}
