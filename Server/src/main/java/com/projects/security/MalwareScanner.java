package com.projects.security;

import io.github.cdimascio.dotenv.Dotenv;
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.HttpEntity;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.util.concurrent.TimeUnit;

public class MalwareScanner {
    private static final Dotenv env = Dotenv.load();
    private static final String API_KEY = env.get("API_KEY");

    public static boolean scanFile(String filePath) throws Exception {
        Path file = Paths.get(filePath);
        try {
            HttpClient client = HttpClient.newHttpClient();
             // Create Multipart Entity
            HttpEntity multipartEntity = MultipartEntityBuilder.create()
                    .addBinaryBody("file", Files.newInputStream(file), ContentType.APPLICATION_OCTET_STREAM, file.getFileName().toString())
                    .build();

            // Convert HttpEntity to ByteArray
            ByteArrayOutputStream baOS = new ByteArrayOutputStream();
            multipartEntity.writeTo(baOS);
            byte[] multipartBody = baOS.toByteArray();

            // Send HTTP Request
            HttpRequest requestPOST = HttpRequest.newBuilder()
                    .uri(URI.create("https://www.virustotal.com/api/v3/files"))
                    .header("x-apikey", API_KEY)
                    .header("accept", "application/json")
                    .header("Content-Type", multipartEntity.getContentType()) // Auto-set boundary
                    .POST(HttpRequest.BodyPublishers.ofByteArray(multipartBody))
                    .build();



            HttpResponse<String> responsePOST = client.send(requestPOST, HttpResponse.BodyHandlers.ofString());

            // Parse JSON Response
            JSONObject jsonResponse = new JSONObject(responsePOST.body());
            System.out.println("VirusTotal Response: " + jsonResponse.toString(4));

            if (!jsonResponse.has("data") || !jsonResponse.getJSONObject("data").has("id")) {
                throw new Exception("Error scanning file: Response does not contain an ID.");
            }

            String analysisId = jsonResponse.getJSONObject("data").getString("id");

            // Polling logic
            int maxRetries = 4; // Max wait time: 4 retries * 30 sec = 120 sec
            int retryInterval = 30; // 30 seconds
            String status;

            JSONObject jsonResponseGET = null;

            while (maxRetries > 0) {
                // Send GET request to retrieve scan results
                HttpRequest requestGET = HttpRequest.newBuilder()
                        .uri(URI.create("https://www.virustotal.com/api/v3/analyses/" + analysisId))
                        .header("accept", "application/json")
                        .header("x-apikey", API_KEY)
                        .GET()
                        .build();
                HttpResponse<String> responseGET = client.send(requestGET, HttpResponse.BodyHandlers.ofString());
                jsonResponseGET = new JSONObject(responseGET.body());

                // Check scan status
                if (jsonResponseGET.has("data") && jsonResponseGET.getJSONObject("data").has("attributes")) {
                    status = jsonResponseGET.getJSONObject("data").getJSONObject("attributes").getString("status");

                    if ("completed".equalsIgnoreCase(status)) {
                        System.out.println("Scan Completed!");
                        break;
                    }
                }

                maxRetries--;
                if (maxRetries == 0) {
                    throw new Exception("Scan timed out after 120 seconds.");
                }

                // Wait before retrying
                System.out.println("Scan still in progress. Retrying in " + (retryInterval) + " seconds...");
                TimeUnit.SECONDS.sleep(retryInterval);
            }

            // Check scan results
            if (jsonResponseGET.has("data") && jsonResponseGET.getJSONObject("data").has("attributes")) {
                JSONObject scanResults = jsonResponseGET.getJSONObject("data").getJSONObject("attributes").getJSONObject("results");
                System.out.println("Scan Results: " + scanResults.toString(4));

                return scanResults.has("malicious") && scanResults.getInt("malicious") > 0;
            }
        } catch (Exception e) {
            throw new Exception("Error scanning file: " + e.getMessage());
        }
        return false;
    }
}
